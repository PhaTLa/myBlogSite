[{"categories":["DevOps","AWS","Kubernetes"],"content":"A comprehensive guide to setting up production-grade Amazon EKS clusters with best practices for security, networking, and observability.","date":"2025-10-08","objectID":"/production-ready-eks-clusters/","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":" Building Production-Ready Kubernetes Clusters on AWS EKS Amazon Elastic Kubernetes Service (EKS) has become the go-to solution for running Kubernetes workloads in AWS. However, setting up a truly production-ready EKS cluster involves much more than just clicking ‚ÄúCreate Cluster‚Äù in the AWS console. In this post, I‚Äôll walk you through the essential components and best practices I‚Äôve learned from deploying and managing EKS clusters in production environments. ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:0:0","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"üéØ What Makes a Cluster ‚ÄúProduction-Ready‚Äù? Before diving into the technical details, let‚Äôs define what we mean by ‚Äúproduction-ready‚Äù: High Availability: Multi-AZ deployment with proper node distribution Security: Network isolation, RBAC, pod security standards Observability: Comprehensive monitoring, logging, and alerting Scalability: Auto-scaling capabilities for both nodes and pods Disaster Recovery: Backup strategies and recovery procedures Cost Optimization: Right-sizing and efficient resource utilization ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:1:0","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"üèóÔ∏è Infrastructure Foundation ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:2:0","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"VPC Design The foundation of any EKS cluster is a well-designed VPC. Here‚Äôs the architecture I typically use: # terraform/vpc.tf module \"vpc\" { source = \"terraform-aws-modules/vpc/aws\" name = \"eks-production-vpc\" cidr = \"10.0.0.0/16\" azs = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"] private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"] public_subnets = [\"10.0.101.0/24\", \"10.0.102.0/24\", \"10.0.103.0/24\"] enable_nat_gateway = true enable_vpn_gateway = false enable_dns_hostnames = true enable_dns_support = true # Required for EKS public_subnet_tags = { \"kubernetes.io/cluster/${var.cluster_name}\" = \"shared\" \"kubernetes.io/role/elb\" = \"1\" } private_subnet_tags = { \"kubernetes.io/cluster/${var.cluster_name}\" = \"shared\" \"kubernetes.io/role/internal-elb\" = \"1\" } } ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:2:1","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"EKS Cluster Configuration # terraform/eks.tf module \"eks\" { source = \"terraform-aws-modules/eks/aws\" cluster_name = var.cluster_name cluster_version = \"1.28\" vpc_id = module.vpc.vpc_id subnet_ids = module.vpc.private_subnets # Cluster endpoint configuration cluster_endpoint_private_access = true cluster_endpoint_public_access = true cluster_endpoint_public_access_cidrs = [\"0.0.0.0/0\"] # Cluster encryption cluster_encryption_config = [{ provider_key_arn = aws_kms_key.eks.arn resources = [\"secrets\"] }] # Cluster logging cluster_enabled_log_types = [ \"api\", \"audit\", \"authenticator\", \"controllerManager\", \"scheduler\" ] # Node groups eks_managed_node_groups = { system = { name = \"system-nodes\" instance_types = [\"t3.medium\"] capacity_type = \"ON_DEMAND\" min_size = 2 max_size = 4 desired_size = 2 labels = { \"node-type\" = \"system\" } taints = [{ key = \"node-type\" value = \"system\" effect = \"NO_SCHEDULE\" }] } application = { name = \"app-nodes\" instance_types = [\"t3.large\", \"t3.xlarge\"] capacity_type = \"SPOT\" min_size = 2 max_size = 10 desired_size = 3 labels = { \"node-type\" = \"application\" } } } } ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:2:2","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"üîê Security Best Practices ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:3:0","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"Network Security Network security starts with proper subnet isolation and security groups: # terraform/security-groups.tf resource \"aws_security_group\" \"additional\" { name_prefix = \"${var.cluster_name}-additional\" vpc_id = module.vpc.vpc_id ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [module.vpc.vpc_cidr_block] } tags = { Name = \"${var.cluster_name}-additional\" } } ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:3:1","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"RBAC Configuration Implement proper Role-Based Access Control: # k8s/rbac/developer-role.yaml apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: namespace: development name: developer rules: - apiGroups: [\"\"] resources: [\"pods\", \"configmaps\", \"secrets\", \"services\"] verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"] - apiGroups: [\"apps\"] resources: [\"deployments\", \"replicasets\"] verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"] --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: developer-binding namespace: development subjects: - kind: User name: developer-team apiGroup: rbac.authorization.k8s.io roleRef: kind: Role name: developer apiGroup: rbac.authorization.k8s.io ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:3:2","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"üìä Observability Stack ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:4:0","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"Prometheus and Grafana Setup Deploy a comprehensive monitoring stack: # k8s/monitoring/prometheus-values.yaml prometheus: prometheusSpec: retention: 30d storageSpec: volumeClaimTemplate: spec: storageClassName: gp3 accessModes: [\"ReadWriteOnce\"] resources: requests: storage: 50Gi resources: requests: memory: 2Gi cpu: 1000m limits: memory: 4Gi cpu: 2000m grafana: persistence: enabled: true storageClassName: gp3 size: 10Gi adminPassword: \"your-secure-password\" grafana.ini: server: root_url: \"https://grafana.yourdomain.com\" security: disable_gravatar: true ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:4:1","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"Cluster Autoscaler Implement automatic scaling: # k8s/autoscaling/cluster-autoscaler.yaml apiVersion: apps/v1 kind: Deployment metadata: name: cluster-autoscaler namespace: kube-system spec: replicas: 1 selector: matchLabels: app: cluster-autoscaler template: metadata: labels: app: cluster-autoscaler spec: serviceAccountName: cluster-autoscaler containers: - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.28.2 name: cluster-autoscaler resources: limits: cpu: 100m memory: 300Mi requests: cpu: 100m memory: 300Mi command: - ./cluster-autoscaler - --v=4 - --stderrthreshold=info - --cloud-provider=aws - --skip-nodes-with-local-storage=false - --expander=least-waste - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/${CLUSTER_NAME} env: - name: AWS_REGION value: us-west-2 - name: CLUSTER_NAME value: production-eks ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:4:2","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"üöÄ Deployment Automation Here‚Äôs a complete deployment script that ties everything together: #!/bin/bash # deploy.sh set -e CLUSTER_NAME=\"production-eks\" AWS_REGION=\"us-west-2\" echo \"üöÄ Deploying EKS cluster: $CLUSTER_NAME\" # Deploy infrastructure with Terraform echo \"üì¶ Deploying infrastructure...\" cd terraform terraform init terraform plan -var=\"cluster_name=$CLUSTER_NAME\" terraform apply -auto-approve -var=\"cluster_name=$CLUSTER_NAME\" # Update kubeconfig echo \"üîß Updating kubeconfig...\" aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME # Install essential add-ons echo \"üîå Installing cluster add-ons...\" # AWS Load Balancer Controller helm repo add eks https://aws.github.io/eks-charts helm repo update helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\ -n kube-system \\ --set clusterName=$CLUSTER_NAME \\ --set serviceAccount.create=false \\ --set serviceAccount.name=aws-load-balancer-controller # Prometheus monitoring stack helm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm install kube-prometheus-stack prometheus-community/kube-prometheus-stack \\ -n monitoring \\ --create-namespace \\ -f ../k8s/monitoring/prometheus-values.yaml # Cluster Autoscaler kubectl apply -f ../k8s/autoscaling/ echo \"‚úÖ EKS cluster deployment completed!\" echo \"üåê Grafana Dashboard: kubectl port-forward -n monitoring svc/kube-prometheus-stack-grafana 3000:80\" echo \"üìä Prometheus UI: kubectl port-forward -n monitoring svc/kube-prometheus-stack-prometheus 9090:9090\" ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:5:0","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"üí° Production Tips \u0026 Lessons Learned ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:6:0","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"1. Cost Optimization Use Spot Instances for non-critical workloads (can save 60-90%) Implement Horizontal Pod Autoscaler to right-size your applications Regular resource usage audits to identify waste ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:6:1","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"2. Backup Strategy # velero-values.yaml configuration: provider: aws backupStorageLocation: bucket: my-velero-backup-bucket config: region: us-west-2 volumeSnapshotLocation: config: region: us-west-2 schedules: daily-backup: schedule: \"0 2 * * *\" template: ttl: \"720h\" includedNamespaces: - production - staging ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:6:2","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"3. Security Scanning Implement automated security scanning: # .github/workflows/security-scan.yml name: Security Scan on: push: branches: [main] jobs: security-scan: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Run Trivy vulnerability scanner uses: aquasecurity/trivy-action@master with: scan-type: 'fs' scan-ref: '.' format: 'sarif' output: 'trivy-results.sarif' ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:6:3","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["DevOps","AWS","Kubernetes"],"content":"üéâ Conclusion Building production-ready EKS clusters requires careful planning and attention to detail. The configuration I‚Äôve shared here forms a solid foundation, but remember that every production environment has unique requirements. Key takeaways: Start with a solid VPC foundation Implement security from day one Plan for observability and monitoring Automate everything possible Test your disaster recovery procedures In my next post, I‚Äôll dive deeper into advanced EKS networking patterns and service mesh integration. Stay tuned! Have questions about EKS or want to share your own experiences? Feel free to reach out on LinkedIn or drop me an email. ","date":"2025-10-08","objectID":"/production-ready-eks-clusters/:7:0","tags":["AWS","EKS","Kubernetes","DevOps","Infrastructure","Production"],"title":"Building Production-Ready Kubernetes Clusters on AWS EKS","uri":"/production-ready-eks-clusters/"},{"categories":["Personal"],"content":"The professional journey of Ph·∫°m T√πng L√¢m - a DevOps Engineer aspiring to become a Solution Architect, detailing experience with AWS, Kubernetes, CI/CD, and more.","date":"2025-10-01","objectID":"/about_me/","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"About Ph·∫°m T√πng L√¢m ","date":"2025-10-01","objectID":"/about_me/:0:0","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"DevOps Engineer \u0026 Solution Architect Location: Ha Dong, Ha Noi City, Vietnam Email: phamtunglam.workmail.public@gmail.com LinkedIn: alexpham15010305 ","date":"2025-10-01","objectID":"/about_me/:1:0","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"Career Vision My immediate goal is to further develop my capabilities and seek new challenges in the DevOps field, ensuring that I can contribute effectively to a dynamic team while keeping abreast of the latest technologies and methodologies. In the future, I aspire to evolve into a Solution Architect role, where I can design and implement innovative solutions on a larger scale. ","date":"2025-10-01","objectID":"/about_me/:2:0","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"What I‚Äôm Doing Now Currently, I‚Äôm working as an Application Architect at LG CNS. In this role, I focus on: Architecture Design: Designing and building robust software infrastructures on the AWS cloud for both monolithic and microservices architectures International Consultation: Providing consultation and support to international customers, guiding them through system installation and management Infrastructure Automation: Heavily relying on Infrastructure as Code (IaC) tools like Ansible and Terraform to automate provisioning AWS Services Management: Effectively managing core AWS services such as EKS, EC2, and ECR ","date":"2025-10-01","objectID":"/about_me/:3:0","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"Technical Toolkit I‚Äôm passionate about building and optimizing the bridges between development and operations. Here‚Äôs what I bring to the table: ","date":"2025-10-01","objectID":"/about_me/:4:0","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"CI/CD \u0026 DevOps Pipeline My expertise lies in crafting seamless CI/CD pipelines that fit various project needs. I have hands-on experience with: Jenkins - Traditional automation server GitLab CI - Integrated DevOps platform TektonCI - Kubernetes-native CI/CD ArgoCD - GitOps continuous delivery AWS CodePipeline - Cloud-native CI/CD ","date":"2025-10-01","objectID":"/about_me/:4:1","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"Infrastructure \u0026 Automation My approach is grounded in automation and containerization: Infrastructure as Code: Ansible, Terraform Container Technologies: Docker, Podman Container Orchestration: Kubernetes, Amazon EKS Platform Experience: On-premise servers, AWS Cloud ","date":"2025-10-01","objectID":"/about_me/:4:2","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"Observability \u0026 Monitoring To ensure systems are not just running but are healthy and performant, I focus on comprehensive observability: Monitoring: Prometheus, Grafana Logging: Elastic Stack (Elasticsearch, Kibana, Vector) Tracing: Zipkin, Jaeger Alerting: AlertManager, PagerDuty integration ","date":"2025-10-01","objectID":"/about_me/:4:3","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"Programming \u0026 Scripting This is all supported by a solid foundation in programming: Java - Enterprise application development Python - Automation and data processing Bash - System administration and scripting Go - Cloud-native tool development ","date":"2025-10-01","objectID":"/about_me/:4:4","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"Professional Philosophy ‚ÄúThe best way to predict the future is to create it through reliable, scalable, and automated systems.‚Äù I believe in: Automation First: If you do it twice, automate it Infrastructure as Code: Everything should be version controlled Observability: You can‚Äôt improve what you can‚Äôt measure Continuous Learning: Technology evolves, and so should we ","date":"2025-10-01","objectID":"/about_me/:5:0","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"},{"categories":["Personal"],"content":"Let‚Äôs Connect I‚Äôm always interested in discussing: DevOps best practices and emerging technologies AWS cloud architecture and optimization Kubernetes and container orchestration strategies Infrastructure automation and scaling challenges Feel free to reach out through LinkedIn or email. I‚Äôm always happy to share knowledge and learn from fellow professionals in the field. ","date":"2025-10-01","objectID":"/about_me/:6:0","tags":["About","DevOps","AWS","Career"],"title":"About Me","uri":"/about_me/"}]